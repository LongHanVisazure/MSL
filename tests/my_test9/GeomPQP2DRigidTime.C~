#undef max
#undef min

#include <fstream>
#include <math.h>
#include <cmath>


#include "/home/roomba/Documents/tri/MSLlibrary/include/MSL/geomPQP.h"

#include "GeomPQP2DRigidTime.h"






GeomPQP2DRigidTime::GeomPQP2DRigidTime(string path = ""):GeomPQP2DRigid(path) {
  
  // FilePath is set in the base class
  LoadEnvironment(FilePath);
  LoadRobot(FilePath);
  LoadMovingObstacle(FilePath);
  
  READ_OPTIONAL_PARAMETER(CollisionPairs);
}



void GeomPQP2DRigidTime::LoadRobot(string path) {
  int i,j;
  string fname;
  list<MSLPolygon> pl;

  char* s = new char[50];

  // First check how many robot parts there are Robot0, Robot1, ...
  i = 0;
  sprintf(s,"%sRobot%d",FilePath.c_str(),i);
  while (is_file(s)) {
    i++;
    sprintf(s,"%sRobot%d",FilePath.c_str(),i);
  }

  NumBodies = i;
  
  if (NumBodies == 0)
    cout << "ERROR: No robot files at " << FilePath << "\n";
  
  Robot = vector<list<MSLTriangle> >(NumBodies);
  Ro = vector<PQP_Model>(NumBodies);
  
  for (i = 0; i < NumBodies; i++) {
    
    sprintf(s,"%sRobot%d",FilePath.c_str(),i);
    std::ifstream fin(s);
    pl.clear();
    fin >> pl;

    Robot[i] = PolygonsToTriangles(pl,5.0);
    j=0;
    list<MSLTriangle>::iterator t;
    
    Ro[i].BeginModel();
    PQP_REAL p1[3],p2[3],p3[3];
    forall(t,Robot[i]){
      p1[0] = (PQP_REAL) t->p1.xcoord();
      p1[1] = (PQP_REAL) t->p1.ycoord();
      p1[2] = (PQP_REAL) t->p1.zcoord();
      p2[0] = (PQP_REAL) t->p2.xcoord();
      p2[1] = (PQP_REAL) t->p2.ycoord();
      p2[2] = (PQP_REAL) t->p2.zcoord();
      p3[0] = (PQP_REAL) t->p3.xcoord();
      p3[1] = (PQP_REAL) t->p3.ycoord();
      p3[2] = (PQP_REAL) t->p3.zcoord();
      Ro[i].AddTri(p1,p2,p3,j);
      j++;
    }
    Ro[i].EndModel();
  }
}


bool GeomPQP2DRigidTime::CollisionFree(const MSLVector &q){
  int i,j;
  list<MSLVector>::iterator v;

  PQP_CollideResult cres;  
  SetTransformation(q);

  // Check for collisions with obstacles
  for (i = 0; i < NumBodies; i++) {    
    PQP_Collide(&cres,RR[i],TR[i],&Ro[i],RO,TO,&Ob,PQP_FIRST_CONTACT);    
    if (cres.NumPairs() >= 1)
      return false;
  }
  
  // Check for pairwise collisions
  forall(v,CollisionPairs) {
    i = (int) v->operator[](0); 
    j = (int) v->operator[](1);
    PQP_Collide(&cres,RR[i],TR[i],&Ro[i],RR[j],TR[j],&Ro[j],PQP_FIRST_CONTACT);    
    if (cres.NumPairs() >= 1)
      return false;
  }

  return true;
}


double GeomPQP2DRigidTime::DistanceComp(const MSLVector &q){
  int i,j;
  list<MSLVector>::iterator v;
  double dist = INFINITY;

  PQP_DistanceResult dres;  
  SetTransformation(q);

  // Check for collisions with obstacles
  for (i = 0; i < NumBodies; i++) {    
    PQP_Distance(&dres,RR[i],TR[i],&Ro[i],RO,TO,&Ob,0.0,0.0);    
    if (dres.Distance() < dist)
      dist = dres.Distance();
  }
  
  // Check for pairwise collisions
  forall(v,CollisionPairs) {
    i = (int) v->operator[](0); 
    j = (int) v->operator[](1);
    PQP_Distance(&dres,RR[i],TR[i],&Ro[i],RR[j],TR[j],&Ro[j],0.0,0.0);    
    if (dres.Distance() < dist)
      dist = dres.Distance();
  }

  return dist;
}


void GeomPQP2DRigidTime::SetTransformation(const MSLVector &q){

  int i;
  //commented out by triana 9/2/14
  MSLVector qi(3);
  //Added by Triana 9/2/14
 // MSLVector qi(4);

  for (i = 0; i < NumBodies; i++) {
    /**
	//Added by triana 9/2/14
	MSLVector mysamp;
	mysamp = q;
	printf("MSLVector qi: \n");
	qi.print();
	printf("\nMSLVector q: \n");
	mysamp.print();
	printf("\n");
	////////////////////////////
	**/

	// Get the configuration
    qi[0] = q[i*3];
    qi[1] = q[i*3+1];
    qi[2] = q[i*3+2]; 
    
    // Set translation
    TR[i][0]=(PQP_REAL)qi[0];
    TR[i][1]=(PQP_REAL)qi[1];
    TR[i][2]=0.0;
    
    // Set yaw rotation
    RR[i][0][0] = (PQP_REAL)(cos(qi[2]));
    RR[i][0][1] = (PQP_REAL)(-sin(qi[2]));
    RR[i][0][2] = 0.0;
    RR[i][1][0] = (PQP_REAL)(sin(qi[2]));
    RR[i][1][1] = (PQP_REAL)(cos(qi[2]));
    RR[i][1][2] = 0.0;
    RR[i][2][0] = 0.0;
    RR[i][2][1] = 0.0;
    RR[i][2][2] = 1.0;    
  }
}

